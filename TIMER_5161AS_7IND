const int pinA = 2, pinB = 3, pinC = 4, pinD = 5, pinE = 6, pinF = 7, pinG = 8;
const int pinA1 = 22, pinB1 = 23, pinC1 = 24, pinD1 = 25, pinE1 = 26, pinF1 = 27, pinG1 = 28;
const int pinA2 = 29, pinB2 = 30, pinC2 = 31, pinD2 = 32, pinE2 = 33, pinF2 = 34, pinG2 = 35;
const int pinDP = 36; // Пин для точки

// Пины для подключения потенциометра и кнопки
const int potPin = A0;        // Пин для подключения потенциометра
const int buttonPin = 24;     // Пин для подключения кнопки

// Пин для светодиода
const int pin13 = 13;         // Пин для светодиода

// Переменные
int potValue = 0;             // Значение с потенциометра
int timerDuration = 0;        // Продолжительность таймера в секундах
unsigned long startTime = 0;  // Время начала таймера
bool timerRunning = false;    // Флаг состояния таймера
bool ledBlinking = false;     // Флаг мигания светодиода
unsigned long blinkStartTime = 0; // Время начала мигания
unsigned long blinkEndTime = 0;   // Время окончания мигания

// Переменные для debounce
unsigned long lastDebounceTime = 0;  // Время последнего изменения состояния кнопки
unsigned long debounceDelay = 50;    // Задержка для debounce (в миллисекундах)
int lastButtonState = HIGH;          // Предыдущее состояние кнопки
int buttonState = HIGH;            // Текущее состояние кнопки

// Массивы для отображения цифр на индикаторах
const byte digitSegments[10][7] = {
  {LOW, LOW, LOW, LOW, LOW, LOW, HIGH},  // 0
  {HIGH, LOW, LOW, HIGH, HIGH, HIGH, HIGH}, // 1
  {LOW, LOW, HIGH, LOW, LOW, HIGH, LOW},  // 2
  {LOW, LOW, LOW, LOW, HIGH, HIGH, LOW},  // 3
  {HIGH, LOW, LOW, HIGH, HIGH, LOW, LOW}, // 4
  {LOW, HIGH, LOW, LOW, HIGH, LOW, LOW},  // 5
  {LOW, HIGH, LOW, LOW, LOW, LOW, LOW},  // 6
  {LOW, LOW, LOW, HIGH, HIGH, HIGH, HIGH}, // 7
  {LOW, LOW, LOW, LOW, LOW, LOW, LOW},  // 8
  {LOW, LOW, LOW, LOW, HIGH, LOW, LOW}   // 9
};

void setup() {
  // Настройка пинов для индикаторов
  pinMode(pinA, OUTPUT);
  pinMode(pinB, OUTPUT);
  pinMode(pinC, OUTPUT);
  pinMode(pinD, OUTPUT);
  pinMode(pinE, OUTPUT);
  pinMode(pinF, OUTPUT);
  pinMode(pinG, OUTPUT);

  pinMode(pinA1, OUTPUT);
  pinMode(pinB1, OUTPUT);
  pinMode(pinC1, OUTPUT);
  pinMode(pinD1, OUTPUT);
  pinMode(pinE1, OUTPUT);
  pinMode(pinF1, OUTPUT);
  pinMode(pinG1, OUTPUT);

  pinMode(pinA2, OUTPUT);
  pinMode(pinB2, OUTPUT);
  pinMode(pinC2, OUTPUT);
  pinMode(pinD2, OUTPUT);
  pinMode(pinE2, OUTPUT);
  pinMode(pinF2, OUTPUT);
  pinMode(pinG2, OUTPUT);

  // Настройка пина для точки
  pinMode(pinDP, OUTPUT);

  // Настройка пинов для кнопки и светодиода
  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(pin13, OUTPUT);

  Serial.begin(9600); // Инициализация последовательного порта для отладки
}

void loop() {
  // Чтение значения с потенциометра
  potValue = analogRead(potPin);
  
  // Преобразование значения в диапазон времени (например, от 1 до 30 минут)
  timerDuration = map(potValue, 0, 1023, 60, 1800);

  // Чтение состояния кнопки
  int reading = digitalRead(buttonPin);

  // Проверка дребезга
  if (reading != lastButtonState) {
    lastDebounceTime = millis();
  }

  if ((millis() - lastDebounceTime) > debounceDelay) {
    if (reading != buttonState) {
      buttonState = reading;

      // Если кнопка нажата (LOW из-за INPUT_PULLUP)
      if (buttonState == LOW) {
        startTime = millis(); // Запоминаем время начала
        timerRunning = true;  // Устанавливаем флаг запущенного таймера
        ledBlinking = false;  // Сбрасываем флаг мигания светодиода
        digitalWrite(pin13, LOW); // Выключаем светодиод
        Serial.print("Таймер запущен на ");
        Serial.print(timerDuration / 60);
        Serial.println(" минут.");
      }
    }
  }

  lastButtonState = reading;

  // Если таймер запущен
  if (timerRunning) {
    unsigned long currentTime = millis();
    unsigned long elapsedTime = (currentTime - startTime) / 1000; // Время в секундах

    // Если истекло время таймера
    if (elapsedTime >= timerDuration) {
      Serial.println("Таймер завершен!");
      timerRunning = false;       // Сбрасываем флаг запущенного таймера
      ledBlinking = true;         // Устанавливаем флаг мигания светодиода
      blinkStartTime = currentTime; // Запоминаем время начала мигания
      blinkEndTime = blinkStartTime + 60000; // Мигание в течение 1 минуты
    } else {
      int minutes = (timerDuration - elapsedTime) / 60;
      int seconds = (timerDuration - elapsedTime) % 60;
      int tensOfSeconds = seconds / 10;

      displayNumber(minutes / 10, pinA, pinB, pinC, pinD, pinE, pinF, pinG); // Десятки минут
      displayNumber(minutes % 10, pinA1, pinB1, pinC1, pinD1, pinE1, pinF1, pinG1); // Единицы минут
      displayNumber(tensOfSeconds, pinA2, pinB2, pinC2, pinD2, pinE2, pinF2, pinG2); // Десятки секунд

      // Включаем точку между минутами и секундами
      digitalWrite(pinDP, LOW);
      delay(1000);
      Serial.print("Осталось: ");
      Serial.print(minutes);
      Serial.print(" минут ");
      Serial.print(seconds);
      Serial.println(" сек.");
    }
  }

  // Мигание светодиода
  if (ledBlinking) {
    unsigned long currentTime = millis();

    // Если время мигания истекло
    if (currentTime > blinkEndTime) {
      ledBlinking = false; // Сбрасываем флаг мигания светодиода
      digitalWrite(pin13, LOW); // Выключаем светодиод
    } else {
      unsigned long blinkElapsedTime = (currentTime - blinkStartTime) / 1000; // Время в секундах

      // Мигаем каждые 2 секунды
      if (blinkElapsedTime % 2 < 1) {
        digitalWrite(pin13, HIGH); // Включаем светодиод
      } else {
        digitalWrite(pin13, LOW); // Выключаем светодиод
      }
    }
  }
}

void displayNumber(int number, int a, int b, int c, int d, int e, int f, int g) {
  digitalWrite(a, digitSegments[number][0]);
  digitalWrite(b, digitSegments[number][1]);
  digitalWrite(c, digitSegments[number][2]);
  digitalWrite(d, digitSegments[number][3]);
  digitalWrite(e, digitSegments[number][4]);
  digitalWrite(f, digitSegments[number][5]);
  digitalWrite(g, digitSegments[number][6]);
}
